var searchIndex = {};
searchIndex["tower_grpc"] = {"doc":"","items":[[3,"Code","tower_grpc","",null,null],[3,"Status","","",null,null],[3,"Request","","",null,null],[3,"Response","","",null,null],[3,"Encode","","A protobuf encoded gRPC response body",null,null],[4,"Error","","",null,null],[13,"Grpc","","",0,null],[13,"Inner","","",0,null],[0,"client","","",null,null],[3,"Grpc","tower_grpc::client","",null,null],[0,"unary","","",null,null],[3,"ResponseFuture","tower_grpc::client::unary","",null,null],[6,"Once","","",null,null],[11,"fmt","","",1,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",1,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[0,"client_streaming","tower_grpc::client","",null,null],[3,"ResponseFuture","tower_grpc::client::client_streaming","",null,null],[11,"fmt","","",2,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",2,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[0,"server_streaming","tower_grpc::client","",null,null],[3,"ResponseFuture","tower_grpc::client::server_streaming","",null,null],[11,"fmt","","",3,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",3,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[0,"streaming","tower_grpc::client","",null,null],[3,"ResponseFuture","tower_grpc::client::streaming","",null,null],[11,"fmt","","",4,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"poll","","",4,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[8,"Encodable","tower_grpc::client","Convert a stream of protobuf messages to an HTTP body payload.",null,null],[10,"into_encode","","",5,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"fmt","","",6,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new `Grpc` instance backed by the given HTTP service.",6,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"poll_ready","","",6,{"inputs":[{"name":"self"}],"output":{"generics":["error"],"name":"poll"}}],[11,"unary","","",6,{"inputs":[{"name":"self"},{"name":"request"},{"name":"pathandquery"}],"output":{"name":"responsefuture"}}],[11,"client_streaming","","",6,{"inputs":[{"name":"self"},{"name":"request"},{"name":"pathandquery"}],"output":{"name":"responsefuture"}}],[11,"server_streaming","","",6,{"inputs":[{"name":"self"},{"name":"request"},{"name":"pathandquery"}],"output":{"name":"responsefuture"}}],[11,"streaming","","Initiate a full streaming gRPC request",6,{"inputs":[{"name":"self"},{"name":"request"},{"name":"pathandquery"}],"output":{"name":"responsefuture"}}],[0,"generic","tower_grpc","gRPC generic over encoder / decoder.",null,null],[3,"Streaming","tower_grpc::generic","An stream of inbound gRPC messages",null,null],[3,"Encode","","Encodes gRPC message types",null,null],[3,"EncodeBuf","","A buffer to encode a message into.",null,null],[3,"DecodeBuf","","A buffer to decode messages from.",null,null],[0,"server","","",null,null],[3,"Grpc","tower_grpc::generic::server","",null,null],[11,"fmt","","",7,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",7,{"inputs":[{"name":"self"}],"output":{"name":"grpc"}}],[11,"new","","",7,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"unary","","",7,{"inputs":[{"name":"self"},{"name":"s"},{"name":"request"}],"output":{"generics":["streaming"],"name":"responsefuture"}}],[11,"client_streaming","","",7,{"inputs":[{"name":"self"},{"name":"s"},{"name":"request"}],"output":{"name":"responsefuture"}}],[11,"server_streaming","","",7,{"inputs":[{"name":"self"},{"name":"s"},{"name":"request"}],"output":{"generics":["streaming"],"name":"responsefuture"}}],[11,"streaming","","",7,{"inputs":[{"name":"self"},{"name":"s"},{"name":"request"}],"output":{"name":"responsefuture"}}],[0,"client_streaming","","",null,null],[3,"ResponseFuture","tower_grpc::generic::server::client_streaming","",null,null],[11,"fmt","","",8,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",8,{"inputs":[{"name":"t"},{"name":"e"}],"output":{"name":"self"}}],[11,"poll","","",8,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[0,"server_streaming","tower_grpc::generic::server","",null,null],[3,"ResponseFuture","tower_grpc::generic::server::server_streaming","A server streaming response future",null,null],[11,"new","","",9,{"inputs":[{"name":"t"},{"name":"request"},{"name":"e"}],"output":{"name":"self"}}],[11,"poll","","",9,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",9,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"streaming","tower_grpc::generic::server","",null,null],[3,"ResponseFuture","tower_grpc::generic::server::streaming","",null,null],[11,"fmt","","",10,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",10,{"inputs":[{"name":"t"},{"name":"e"}],"output":{"name":"self"}}],[11,"poll","","",10,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[0,"unary","tower_grpc::generic::server","",null,null],[3,"ResponseFuture","tower_grpc::generic::server::unary","",null,null],[3,"Once","","",null,null],[11,"fmt","","",11,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",12,{"inputs":[{"name":"t"},{"name":"request"},{"name":"e"}],"output":{"name":"self"}}],[11,"poll","","",12,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"poll","","",11,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"fmt","","",12,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[8,"StreamingService","tower_grpc::generic::server","A specialization of tower::Service.",null,null],[16,"Request","","Protobuf request message type",13,null],[16,"RequestStream","","Stream of inbound request messages",13,null],[16,"Response","","Protobuf response message type",13,null],[16,"ResponseStream","","Stream of outbound response messages",13,null],[16,"Future","","Response future",13,null],[10,"call","","Call the service",13,null],[8,"UnaryService","","A specialization of tower::Service.",null,null],[16,"Request","","Protobuf request message type",14,null],[16,"Response","","Protobuf response message type",14,null],[16,"Future","","Response future",14,null],[10,"call","","Call the service",14,null],[8,"ClientStreamingService","","A specialization of tower::Service.",null,null],[16,"Request","","Protobuf request message type",15,null],[16,"RequestStream","","Stream of inbound request messages",15,null],[16,"Response","","Protobuf response message type",15,null],[16,"Future","","Response future",15,null],[10,"call","","Call the service",15,null],[8,"ServerStreamingService","","A specialization of tower::Service.",null,null],[16,"Request","","Protobuf request message type",16,null],[16,"Response","","Protobuf response message type",16,null],[16,"ResponseStream","","Stream of outbound response messages",16,null],[16,"Future","","Response future",16,null],[10,"call","","Call the service",16,null],[11,"fmt","tower_grpc::generic","",17,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",18,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",19,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","","",20,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"is_end_stream","","",17,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"poll_data","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"poll_trailers","","",17,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"poll","","",18,{"inputs":[{"name":"self"}],"output":{"generics":["option"],"name":"poll"}}],[11,"reserve","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"remaining_mut","","",19,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"advance_mut","","",19,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"bytes_mut","","",19,null],[11,"remaining","","",20,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"bytes","","",20,null],[11,"advance","","",20,{"inputs":[{"name":"self"},{"name":"usize"}],"output":null}],[11,"drop","","",20,{"inputs":[{"name":"self"}],"output":null}],[8,"Codec","","Encodes and decodes gRPC message types",null,null],[18,"CONTENT_TYPE","","The content-type header for messages using this encoding.",21,null],[16,"Encode","","The encode type",21,null],[16,"Encoder","","Encoder type",21,null],[16,"Decode","","The decode type",21,null],[16,"Decoder","","Decoder type",21,null],[10,"encoder","","Returns a new encoder",21,null],[10,"decoder","","Returns a new decoder",21,null],[8,"Encoder","","Encodes gRPC message types",null,null],[16,"Item","","Type that is encoded",22,null],[10,"encode","","Encode a message into the provided buffer.",22,null],[8,"Decoder","","Decodes gRPC message types",null,null],[16,"Item","","Type that is decoded",23,null],[10,"decode","","Decode a message from the buffer.",23,{"inputs":[{"name":"self"},{"name":"decodebuf"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tower_grpc","",0,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"from","","",0,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"fmt","","",24,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","Create a new gRPC request",24,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"get_ref","","Get a reference to the message",24,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the message",24,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"headers","","Get a reference to the request headers.",24,{"inputs":[{"name":"self"}],"output":{"name":"headermap"}}],[11,"headers_mut","","Get a mutable reference to the request headers.",24,{"inputs":[{"name":"self"}],"output":{"name":"headermap"}}],[11,"into_inner","","Consumes `self`, returning the message",24,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"from_http","","Convert an HTTP request to a gRPC request",24,{"inputs":[{"name":"request"}],"output":{"name":"self"}}],[11,"into_http","","",24,{"inputs":[{"name":"self"},{"name":"uri"}],"output":{"name":"request"}}],[11,"map","","",24,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"request"}}],[11,"fmt","","",25,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"new","","",25,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[11,"get_ref","","Get a reference to the message",25,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"get_mut","","Get a mutable reference to the message",25,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_inner","","Consumes `self`, returning the message",25,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_http","","",25,{"inputs":[{"name":"self"}],"output":{"name":"response"}}],[11,"map","","",25,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"response"}}],[11,"fmt","","",26,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",26,{"inputs":[{"name":"self"}],"output":{"name":"status"}}],[11,"clone","","",27,{"inputs":[{"name":"self"}],"output":{"name":"code"}}],[11,"eq","","",27,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"bool"}}],[11,"ne","","",27,{"inputs":[{"name":"self"},{"name":"code"}],"output":{"name":"bool"}}],[11,"code","","",26,{"inputs":[{"name":"self"}],"output":{"name":"code"}}],[18,"OK","","",26,null],[18,"CANCELED","","",26,null],[18,"UNKNOWN","","",26,null],[18,"INVALID_ARGUMENT","","",26,null],[18,"DEADLINE_EXCEEDED","","",26,null],[18,"NOT_FOUND","","",26,null],[18,"ALREADY_EXISTS","","",26,null],[18,"PERMISSION_DENIED","","",26,null],[18,"RESOURCE_EXHAUSTED","","",26,null],[18,"FAILED_PRECONDITION","","",26,null],[18,"ABORTED","","",26,null],[18,"OUT_OF_RANGE","","",26,null],[18,"UNIMPLEMENTED","","",26,null],[18,"INTERNAL","","",26,null],[18,"UNAVAILABLE","","",26,null],[18,"DATA_LOSS","","",26,null],[18,"UNAUTHENTICATED","","",26,null],[11,"to_header_value","","",26,{"inputs":[{"name":"self"}],"output":{"name":"headervalue"}}],[11,"from","","",26,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[18,"OK","","",27,null],[11,"fmt","","",27,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"server","","",null,null],[3,"Grpc","tower_grpc::server","",null,null],[0,"client_streaming","","",null,null],[3,"ResponseFuture","tower_grpc::server::client_streaming","",null,null],[11,"poll","","",28,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",28,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"server_streaming","tower_grpc::server","",null,null],[3,"ResponseFuture","tower_grpc::server::server_streaming","",null,null],[11,"poll","","",29,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",29,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"streaming","tower_grpc::server","",null,null],[3,"ResponseFuture","tower_grpc::server::streaming","",null,null],[11,"poll","","",30,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",30,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[0,"unary","tower_grpc::server","",null,null],[3,"ResponseFuture","tower_grpc::server::unary","",null,null],[11,"poll","","",31,{"inputs":[{"name":"self"}],"output":{"name":"poll"}}],[11,"fmt","","",31,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"fmt","tower_grpc::server","",32,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[11,"clone","","",32,{"inputs":[{"name":"self"}],"output":{"name":"grpc"}}],[11,"unary","","",32,{"inputs":[{"name":"t"},{"name":"request"}],"output":{"name":"responsefuture"}}],[11,"client_streaming","","",32,{"inputs":[{"name":"t"},{"name":"request"}],"output":{"name":"responsefuture"}}],[11,"server_streaming","","",32,{"inputs":[{"name":"t"},{"name":"request"}],"output":{"name":"responsefuture"}}],[11,"streaming","","",32,{"inputs":[{"name":"t"},{"name":"request"}],"output":{"name":"responsefuture"}}],[0,"codegen","tower_grpc","Type re-exports used by generated code",null,null],[0,"server","tower_grpc::codegen","Type re-exports used by generated server code",null,null],[0,"grpc","tower_grpc::codegen::server","Re-export types from this crate",null,null],[3,"Request","tower_grpc::codegen::server::grpc","",null,null],[3,"Response","","",null,null],[3,"Status","","",null,null],[3,"Encode","","A protobuf encoded gRPC response body",null,null],[4,"Error","","",null,null],[13,"Grpc","","",0,null],[13,"Inner","","",0,null],[6,"Streaming","","A stream of inbound gRPC messages",null,null],[0,"bytes","tower_grpc::codegen::server","Re-export types from the `bytes` crate.",null,null],[3,"Bytes","tower_grpc::codegen::server::bytes","A reference counted contiguous slice of memory.",null,null],[0,"futures","tower_grpc::codegen::server","Re-export types from the `future` crate.",null,null],[8,"Future","tower_grpc::codegen::server::futures","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",33,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",33,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",33,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Block the current thread until this future is resolved.",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",33,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",33,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",33,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",33,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",33,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",33,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",33,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",33,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",33,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",33,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",33,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",33,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",33,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[8,"Stream","","A stream of values, not all of which may have been produced yet.",null,null],[16,"Item","","The type of item this stream will yield on success.",34,null],[16,"Error","","The type of error this stream may generate.",34,null],[10,"poll","","Attempt to pull out the next value of this stream, returning `None` if the stream is finished.",34,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Creates an iterator which blocks the current thread until each item of this stream is resolved.",34,{"inputs":[{"name":"self"}],"output":{"name":"wait"}}],[11,"into_future","","Converts this stream into a `Future`.",34,{"inputs":[{"name":"self"}],"output":{"name":"streamfuture"}}],[11,"map","","Converts a stream of type `T` to a stream of type `U`.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Converts a stream of error type `T` to a stream of error type `U`.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"filter","","Filters the values produced by this stream according to the provided predicate.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filter"}}],[11,"filter_map","","Filters the values produced by this stream while simultaneously mapping them to a different type.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"filtermap"}}],[11,"then","","Chain on a computation for when a value is ready, passing the resulting item to the provided closure `f`.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Chain on a computation for when a value is ready, passing the successful results to the provided closure `f`.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Chain on a computation for when an error happens, passing the erroneous result to the provided closure `f`.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"collect","","Collect all of the values of this stream into a vector, returning a future representing the result of that computation.",34,{"inputs":[{"name":"self"}],"output":{"name":"collect"}}],[11,"concat2","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",34,{"inputs":[{"name":"self"}],"output":{"name":"concat2"}}],[11,"concat","","Concatenate all results of a stream into a single extendable destination, returning a future representing the end result.",34,{"inputs":[{"name":"self"}],"output":{"name":"concat"}}],[11,"fold","","Execute an accumulating computation over a stream, collecting all the values into one final result.",34,{"inputs":[{"name":"self"},{"name":"t"},{"name":"f"}],"output":{"name":"fold"}}],[11,"flatten","","Flattens a stream of streams into just one continuous stream.",34,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"skip_while","","Skip elements on this stream while the predicate provided resolves to `true`.",34,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"skipwhile"}}],[11,"take_while","","Take elements from this stream while the predicate provided resolves to `true`.",34,{"inputs":[{"name":"self"},{"name":"p"}],"output":{"name":"takewhile"}}],[11,"for_each","","Runs this stream to completion, executing the provided closure for each element on the stream.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"foreach"}}],[11,"from_err","","Map this stream's error to any error implementing `From` for this stream's `Error`, returning a new stream.",34,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"take","","Creates a new stream of at most `amt` items of the underlying stream.",34,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"take"}}],[11,"skip","","Creates a new stream which skips `amt` items of the underlying stream.",34,{"inputs":[{"name":"self"},{"name":"u64"}],"output":{"name":"skip"}}],[11,"fuse","","Fuse a stream such that `poll` will never again be called once it has finished.",34,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"by_ref","","Borrows a stream, rather than consuming it.",34,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[11,"catch_unwind","","Catches unwinding panics while polling the stream.",34,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"buffered","","An adaptor for creating a buffered list of pending futures.",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"buffered"}}],[11,"buffer_unordered","","An adaptor for creating a buffered list of pending futures (unordered).",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bufferunordered"}}],[11,"merge","","An adapter for merging the output of two streams.",34,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"merge"}}],[11,"zip","","An adapter for zipping two streams together.",34,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"zip"}}],[11,"chain","","Adapter for chaining two stream.",34,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"chain"}}],[11,"peekable","","Creates a new stream which exposes a `peek` method.",34,{"inputs":[{"name":"self"}],"output":{"name":"peekable"}}],[11,"chunks","","An adaptor for chunking up items of the stream inside a vector.",34,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"chunks"}}],[11,"select","","Creates a stream that selects the next element from either this stream or the provided one, whichever is ready first.",34,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"select"}}],[11,"forward","","A future that completes after the given stream has been fully processed into the sink, including flushing.",34,{"inputs":[{"name":"self"},{"name":"s"}],"output":{"name":"forward"}}],[11,"split","","Splits this `Stream + Sink` object into separate `Stream` and `Sink` objects.",34,null],[11,"inspect","","Do something with each item of this stream, afterwards passing it on.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"inspect_err","","Do something with the error of this stream, afterwards passing it on.",34,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspecterr"}}],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",null,null],[4,"Async","","Return type of future, indicating whether a value is ready or not.",null,null],[13,"Ready","","Represents that a value is immediately ready.",35,null],[13,"NotReady","","Represents that a value is not ready yet, but may be so later.",35,null],[3,"FutureResult","","A future representing a value that is immediately ready.",null,null],[5,"ok","","Creates a \"leaf future\" from an immediate value of a finished and successful computation.",null,{"inputs":[{"name":"t"}],"output":{"name":"futureresult"}}],[0,"http","tower_grpc::codegen::server","Re-exported types from the `http` crate.",null,null],[3,"Request","tower_grpc::codegen::server::http","Represents an HTTP request.",null,null],[3,"Response","","Represents an HTTP response",null,null],[3,"HeaderMap","","A set of HTTP headers",null,null],[0,"h2","tower_grpc::codegen::server","Re-exported types from the `h2` crate.",null,null],[3,"Error","tower_grpc::codegen::server::h2","Represents HTTP/2.0 operation errors.",null,null],[0,"tower_h2","tower_grpc::codegen::server","Re-export types from the `tower_h2` crate",null,null],[8,"Body","tower_grpc::codegen::server::tower_h2","A generic h2 client/server request/response body.",null,null],[16,"Data","","The body chunk type",36,null],[11,"is_end_stream","","Returns `true` when the end of stream has been reached.",36,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[10,"poll_data","","Polls a stream of data.",36,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_trailers","","Returns possibly one `HeaderMap` for trailers.",36,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[3,"RecvBody","","Allows a stream to be read from the remote.",null,null],[0,"tower","tower_grpc::codegen::server","Re-exported types from the `tower` crate.",null,null],[8,"Service","tower_grpc::codegen::server::tower","An asynchronous function from `Request` to a `Response`.",null,null],[16,"Request","","Requests handled by the service.",37,null],[16,"Response","","Responses given by the service.",37,null],[16,"Error","","Errors produced by the service.",37,null],[16,"Future","","The future response value.",37,null],[11,"ready","","A future yielding the service when it is ready to accept a request.",37,{"inputs":[{"name":"self"}],"output":{"name":"ready"}}],[10,"poll_ready","","Returns `Ready` when the service is able to process requests.",37,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[10,"call","","Process the request and return the response asynchronously.",37,null],[8,"ReadyService","","An asynchronous function from `Request` to a `Response` that is always ready to process a request.",null,null],[16,"Request","","Requests handled by the service.",38,null],[16,"Response","","Responses returned by the service.",38,null],[16,"Error","","Errors produced by the service.",38,null],[16,"Future","","The future response value.",38,null],[10,"call","","Process the request and return the response asynchronously.",38,null],[8,"NewService","","Creates new `Service` values.",null,null],[16,"Request","","Requests handled by the service",39,null],[16,"Response","","Responses given by the service",39,null],[16,"Error","","Errors produced by the service",39,null],[16,"Service","","The `Service` value created by this factory",39,null],[16,"InitError","","Errors produced while building a service.",39,null],[16,"Future","","The future of the `Service` instance.",39,null],[10,"new_service","","Create and return a new service value asynchronously.",39,null],[0,"client","tower_grpc::codegen","",null,null],[0,"grpc","tower_grpc::codegen::client","Re-export types from this crate",null,null],[3,"Request","tower_grpc::codegen::client::grpc","",null,null],[3,"Response","","",null,null],[3,"Status","","",null,null],[4,"Error","","",null,null],[13,"Grpc","","",0,null],[13,"Inner","","",0,null],[0,"http","tower_grpc::codegen::client","",null,null],[3,"Uri","tower_grpc::codegen::client::http","The URI component of a request.",null,null],[3,"PathAndQuery","","Represents the path component of a URI",null,null],[0,"futures","tower_grpc::codegen::client","Re-export types from the `future` crate.",null,null],[8,"Future","tower_grpc::codegen::client::futures","Trait for types which are a placeholder of a value that may become available at some later point in time.",null,null],[16,"Item","","The type of value that this future will resolved with if it is successful.",33,null],[16,"Error","","The type of error that this future will resolve with if it fails in a normal fashion.",33,null],[10,"poll","","Query this future to see if its value has become available, registering interest if it is not.",33,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"wait","","Block the current thread until this future is resolved.",33,{"inputs":[{"name":"self"}],"output":{"name":"result"}}],[11,"map","","Map this future's result to a different type, returning a new future of the resulting type.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"map"}}],[11,"map_err","","Map this future's error to a different error, returning a new future.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"maperr"}}],[11,"from_err","","Map this future's error to any error implementing `From` for this future's `Error`, returning a new future.",33,{"inputs":[{"name":"self"}],"output":{"name":"fromerr"}}],[11,"then","","Chain on a computation for when a future finished, passing the result of the future to the provided closure `f`.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"then"}}],[11,"and_then","","Execute another future after this one has resolved successfully.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"andthen"}}],[11,"or_else","","Execute another future if this one resolves with an error.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"orelse"}}],[11,"select","","Waits for either one of two futures to complete.",33,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select"}}],[11,"select2","","Waits for either one of two differently-typed futures to complete.",33,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"select2"}}],[11,"join","","Joins the result of two futures, waiting for them both to complete.",33,{"inputs":[{"name":"self"},{"name":"b"}],"output":{"name":"join"}}],[11,"join3","","Same as `join`, but with more futures.",33,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"}],"output":{"name":"join3"}}],[11,"join4","","Same as `join`, but with more futures.",33,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"}],"output":{"name":"join4"}}],[11,"join5","","Same as `join`, but with more futures.",33,{"inputs":[{"name":"self"},{"name":"b"},{"name":"c"},{"name":"d"},{"name":"e"}],"output":{"name":"join5"}}],[11,"into_stream","","Convert this future into a single element stream.",33,{"inputs":[{"name":"self"}],"output":{"name":"intostream"}}],[11,"flatten","","Flatten the execution of this future when the successful result of this future is itself another future.",33,{"inputs":[{"name":"self"}],"output":{"name":"flatten"}}],[11,"flatten_stream","","Flatten the execution of this future when the successful result of this future is a stream.",33,{"inputs":[{"name":"self"}],"output":{"name":"flattenstream"}}],[11,"fuse","","Fuse a future such that `poll` will never again be called once it has completed.",33,{"inputs":[{"name":"self"}],"output":{"name":"fuse"}}],[11,"inspect","","Do something with the item of a future, passing it on.",33,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"inspect"}}],[11,"catch_unwind","","Catches unwinding panics while polling the future.",33,{"inputs":[{"name":"self"}],"output":{"name":"catchunwind"}}],[11,"shared","","Create a cloneable handle to this future where all handles will resolve to the same result.",33,{"inputs":[{"name":"self"}],"output":{"name":"shared"}}],[6,"Poll","","Return type of the `Future::poll` method, indicates whether a future's value is ready or not.",null,null],[0,"tower_h2","tower_grpc::codegen::client","",null,null],[8,"HttpService","tower_grpc::codegen::client::tower_h2","An HTTP service",null,null],[16,"RequestBody","","Request payload.",40,null],[16,"ResponseBody","","Response payload.",40,null],[16,"Error","","Errors produced by the service.",40,null],[16,"Future","","The future response value.",40,null],[10,"poll_ready","","Returns `Ready` when the service is able to process requests.",40,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[10,"call","","Process the request and return the response asynchronously.",40,null],[11,"lift","","Wrap the HttpService so that it implements tower::Service directly.",40,{"inputs":[{"name":"self"}],"output":{"name":"liftservice"}}],[11,"lift_ref","","Same as `lift` but operates on an HttpService reference.",40,{"inputs":[{"name":"self"}],"output":{"name":"liftserviceref"}}],[11,"is_end_stream","tower_grpc","",41,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"poll_data","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"poll_trailers","","",41,{"inputs":[{"name":"self"}],"output":{"generics":["option","error"],"name":"poll"}}],[11,"fmt","","",41,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"name":"result"}}],[6,"Streaming","","A stream of inbound gRPC messages",null,null],[18,"CONTENT_TYPE","tower_grpc::generic","The content-type header for messages using this encoding.",21,null],[11,"from","tower_grpc::codegen::server::h2","",42,{"inputs":[{"name":"error"}],"output":{"name":"self"}}],[11,"from","","",42,{"inputs":[{"name":"status"}],"output":{"name":"self"}}],[11,"with_capacity","tower_grpc::codegen::server::bytes","Creates a new `Bytes` with the specified capacity.",43,{"inputs":[{"name":"usize"}],"output":{"name":"bytes"}}],[11,"new","","Creates a new empty `Bytes`.",43,{"inputs":[],"output":{"name":"bytes"}}],[11,"from_static","","Creates a new `Bytes` from a static slice.",43,null],[11,"len","","Returns the number of bytes contained in this `Bytes`.",43,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the `Bytes` has a length of 0.",43,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"slice","","Returns a slice of self for the index range `[begin..end)`.",43,{"inputs":[{"name":"self"},{"name":"usize"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_from","","Returns a slice of self for the index range `[begin..self.len())`.",43,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"slice_to","","Returns a slice of self for the index range `[0..end)`.",43,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_off","","Splits the bytes into two at the given index.",43,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"split_to","","Splits the bytes into two at the given index.",43,{"inputs":[{"name":"self"},{"name":"usize"}],"output":{"name":"bytes"}}],[11,"truncate","","Shortens the buffer, keeping the first `len` bytes and dropping the rest.",43,null],[11,"advance","","Shortens the buffer, dropping the first `cnt` bytes and keeping the rest.",43,null],[11,"clear","","Clears the buffer, removing all data.",43,null],[11,"try_mut","","Attempts to convert into a `BytesMut` handle.",43,{"inputs":[{"name":"self"}],"output":{"generics":["bytesmut","bytes"],"name":"result"}}],[11,"extend_from_slice","","Appends given bytes to this object.",43,null],[11,"partial_cmp","tower_grpc::codegen::client::http","",44,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"pathandquery"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",44,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"fmt","","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"into_iter","tower_grpc::codegen::server::http","Creates a consuming iterator, that is, one that moves keys and values out of the map in arbitary order. The map cannot be used after calling this.",46,{"inputs":[{"name":"self"}],"output":{"name":"intoiter"}}],[11,"try_from","tower_grpc::codegen::client::http","",45,{"inputs":[{"name":"uri"}],"output":{"generics":["uri"],"name":"result"}}],[11,"try_from","","",45,{"inputs":[{"name":"bytes"}],"output":{"generics":["uri"],"name":"result"}}],[11,"try_from","","",45,{"inputs":[{"name":"str"}],"output":{"generics":["uri"],"name":"result"}}],[11,"try_from","","",45,{"inputs":[{"name":"parts"}],"output":{"generics":["uri"],"name":"result"}}],[11,"from","tower_grpc::codegen::server::bytes","",43,{"inputs":[{"name":"headername"}],"output":{"name":"bytes"}}],[11,"from","","",43,{"inputs":[{"name":"custom"}],"output":{"name":"bytes"}}],[11,"from","","",43,{"inputs":[{"name":"headervalue"}],"output":{"name":"bytes"}}],[11,"from","","",43,{"inputs":[{"name":"authority"}],"output":{"name":"bytes"}}],[11,"from","","",43,{"inputs":[{"name":"bytestr"}],"output":{"name":"bytes"}}],[11,"from","","",43,{"inputs":[{"name":"pathandquery"}],"output":{"name":"bytes"}}],[11,"from","","",43,{"inputs":[{"name":"scheme"}],"output":{"name":"bytes"}}],[11,"index","tower_grpc::codegen::server::http","",46,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"t"}}],[11,"clone","","",46,{"inputs":[{"name":"self"}],"output":{"name":"headermap"}}],[11,"clone","tower_grpc::codegen::client::http","",44,{"inputs":[{"name":"self"}],"output":{"name":"pathandquery"}}],[11,"clone","","",45,{"inputs":[{"name":"self"}],"output":{"name":"uri"}}],[11,"fmt","tower_grpc::codegen::server::http","",47,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tower_grpc::codegen::client::http","",45,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tower_grpc::codegen::server::http","",48,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tower_grpc::codegen::client::http","",44,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","tower_grpc::codegen::server::http","",46,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",48,{"inputs":[],"output":{"name":"response"}}],[11,"default","","",46,{"inputs":[],"output":{"name":"headermap"}}],[11,"default","","",47,{"inputs":[],"output":{"name":"request"}}],[11,"default","tower_grpc::codegen::client::http","",45,{"inputs":[],"output":{"name":"uri"}}],[11,"from_iter","tower_grpc::codegen::server::http","",46,{"inputs":[{"name":"i"}],"output":{"name":"headermap"}}],[11,"eq","tower_grpc::codegen::client::http","",45,{"inputs":[{"name":"self"},{"name":"uri"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"pathandquery"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",45,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","tower_grpc::codegen::server::http","",46,{"inputs":[{"name":"self"},{"name":"headermap"}],"output":{"name":"bool"}}],[11,"eq","tower_grpc::codegen::client::http","",44,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",44,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"hash","","",45,null],[11,"extend","tower_grpc::codegen::server::http","Extend a `HeaderMap` with the contents of another `HeaderMap`.",46,null],[11,"extend","","",46,null],[11,"from_str","tower_grpc::codegen::client::http","",45,{"inputs":[{"name":"str"}],"output":{"generics":["uri","invaliduri"],"name":"result"}}],[11,"from_str","","",44,{"inputs":[{"name":"str"}],"output":{"generics":["pathandquery","invaliduri"],"name":"result"}}],[11,"from_buf","tower_grpc::codegen::server::bytes","",43,{"inputs":[{"name":"t"}],"output":{"name":"bytes"}}],[11,"fmt","","",43,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",43,{"inputs":[],"output":{"name":"bytes"}}],[11,"from_iter","","",43,{"inputs":[{"name":"t"}],"output":{"name":"bytes"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",43,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"partial_cmp","","",43,null],[11,"partial_cmp","","",43,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"generics":["ordering"],"name":"option"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"str"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"string"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"t"}],"output":{"name":"bool"}}],[11,"eq","","",43,null],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"vec"}],"output":{"name":"bool"}}],[11,"eq","","",43,{"inputs":[{"name":"self"},{"name":"bytesmut"}],"output":{"name":"bool"}}],[11,"cmp","","",43,{"inputs":[{"name":"self"},{"name":"bytes"}],"output":{"name":"ordering"}}],[11,"into_buf","","",43,null],[11,"into_iter","","",43,null],[11,"from","","",43,{"inputs":[{"name":"string"}],"output":{"name":"bytes"}}],[11,"from","","",43,{"inputs":[{"name":"str"}],"output":{"name":"bytes"}}],[11,"from","","",43,null],[11,"from","","",43,{"inputs":[{"generics":["u8"],"name":"vec"}],"output":{"name":"bytes"}}],[11,"from","","",43,{"inputs":[{"name":"bytesmut"}],"output":{"name":"bytes"}}],[11,"hash","","",43,null],[11,"extend","","",43,null],[11,"extend","","",43,null],[11,"as_ref","","",43,null],[11,"borrow","","",43,null],[11,"clone","","",43,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}],[11,"deref","","",43,null],[11,"fmt","tower_grpc::codegen::server::tower_h2","",49,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"default","","",49,{"inputs":[],"output":{"name":"recvbody"}}],[11,"from","tower_grpc::codegen::server::bytes","",43,{"inputs":[{"name":"data"}],"output":{"name":"bytes"}}],[11,"is_end_stream","tower_grpc::codegen::server::tower_h2","",49,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"poll_data","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"poll_trailers","","",49,{"inputs":[{"name":"self"}],"output":{"generics":["async","error"],"name":"result"}}],[11,"fmt","tower_grpc::codegen::server::h2","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"from","","",42,{"inputs":[{"name":"reason"}],"output":{"name":"error"}}],[11,"from","","",42,{"inputs":[{"name":"usererror"}],"output":{"name":"error"}}],[11,"from","","",42,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",42,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",42,{"inputs":[{"name":"senderror"}],"output":{"name":"error"}}],[11,"fmt","","",42,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"description","","",42,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"from","tower_grpc::codegen::server::futures","",50,{"inputs":[{"name":"result"}],"output":{"name":"futureresult"}}],[11,"from","","",35,{"inputs":[{"name":"t"}],"output":{"name":"async"}}],[11,"eq","","",35,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"ne","","",35,{"inputs":[{"name":"self"},{"name":"async"}],"output":{"name":"bool"}}],[11,"fmt","","",35,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"fmt","","",50,{"inputs":[{"name":"self"},{"name":"formatter"}],"output":{"generics":["error"],"name":"result"}}],[11,"clone","","",35,{"inputs":[{"name":"self"}],"output":{"name":"async"}}],[11,"clone","","",50,{"inputs":[{"name":"self"}],"output":{"name":"futureresult"}}],[11,"poll","","",50,{"inputs":[{"name":"self"}],"output":{"generics":["async"],"name":"result"}}],[11,"map","","Change the success value of this `Async` with the closure provided",35,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"async"}}],[11,"is_ready","","Returns whether this is `Async::Ready`",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"is_not_ready","","Returns whether this is `Async::NotReady`",35,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"builder","tower_grpc::codegen::server::http","Creates a new builder-style object to manufacture a `Request`",47,{"inputs":[],"output":{"name":"builder"}}],[11,"get","","Creates a new `Builder` initialized with a GET method and the given URI.",47,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"put","","Creates a new `Builder` initialized with a PUT method and the given URI.",47,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"post","","Creates a new `Builder` initialized with a POST method and the given URI.",47,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"delete","","Creates a new `Builder` initialized with a DELETE method and the given URI.",47,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"options","","Creates a new `Builder` initialized with an OPTIONS method and the given URI.",47,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"head","","Creates a new `Builder` initialized with a HEAD method and the given URI.",47,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"connect","","Creates a new `Builder` initialized with a CONNECT method and the given URI.",47,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"patch","","Creates a new `Builder` initialized with a PATCH method and the given URI.",47,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"trace","","Creates a new `Builder` initialized with a TRACE method and the given URI.",47,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"new","","Creates a new blank `Request` with the body",47,{"inputs":[{"name":"t"}],"output":{"name":"request"}}],[11,"from_parts","","Creates a new `Request` with the given components parts and body.",47,{"inputs":[{"name":"parts"},{"name":"t"}],"output":{"name":"request"}}],[11,"method","","Returns a reference to the associated HTTP method.",47,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"method_mut","","Returns a mutable reference to the associated HTTP method.",47,{"inputs":[{"name":"self"}],"output":{"name":"method"}}],[11,"uri","","Returns a reference to the associated URI.",47,{"inputs":[{"name":"self"}],"output":{"name":"uri"}}],[11,"uri_mut","","Returns a mutable reference to the associated URI.",47,{"inputs":[{"name":"self"}],"output":{"name":"uri"}}],[11,"version","","Returns the associated version.",47,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"version_mut","","Returns a mutable reference to the associated version.",47,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"headers","","Returns a reference to the associated header field map.",47,{"inputs":[{"name":"self"}],"output":{"name":"headermap"}}],[11,"headers_mut","","Returns a mutable reference to the associated header field map.",47,{"inputs":[{"name":"self"}],"output":{"name":"headermap"}}],[11,"extensions","","Returns a reference to the associated extensions.",47,{"inputs":[{"name":"self"}],"output":{"name":"extensions"}}],[11,"extensions_mut","","Returns a mutable reference to the associated extensions.",47,{"inputs":[{"name":"self"}],"output":{"name":"extensions"}}],[11,"body","","Returns a reference to the associated HTTP body.",47,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"body_mut","","Returns a mutable reference to the associated HTTP body.",47,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_parts","","Consumes the request returning the head and body parts.",47,null],[11,"map","","Consumes the request returning a new request with body mapped to the return type of the passed in function.",47,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"request"}}],[11,"builder","","Creates a new builder-style object to manufacture a `Response`",48,{"inputs":[],"output":{"name":"builder"}}],[11,"new","","Creates a new blank `Response` with the body",48,{"inputs":[{"name":"t"}],"output":{"name":"response"}}],[11,"from_parts","","Creates a new `Response` with the given head and body",48,{"inputs":[{"name":"parts"},{"name":"t"}],"output":{"name":"response"}}],[11,"status","","Returns the `StatusCode`.",48,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"status_mut","","Returns a mutable reference to the associated `StatusCode`.",48,{"inputs":[{"name":"self"}],"output":{"name":"statuscode"}}],[11,"version","","Returns a reference to the associated version.",48,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"version_mut","","Returns a mutable reference to the associated version.",48,{"inputs":[{"name":"self"}],"output":{"name":"version"}}],[11,"headers","","Returns a reference to the associated header field map.",48,{"inputs":[{"name":"self"}],"output":{"name":"headermap"}}],[11,"headers_mut","","Returns a mutable reference to the associated header field map.",48,{"inputs":[{"name":"self"}],"output":{"name":"headermap"}}],[11,"extensions","","Returns a reference to the associated extensions.",48,{"inputs":[{"name":"self"}],"output":{"name":"extensions"}}],[11,"extensions_mut","","Returns a mutable reference to the associated extensions.",48,{"inputs":[{"name":"self"}],"output":{"name":"extensions"}}],[11,"body","","Returns a reference to the associated HTTP body.",48,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"body_mut","","Returns a mutable reference to the associated HTTP body.",48,{"inputs":[{"name":"self"}],"output":{"name":"t"}}],[11,"into_parts","","Consumes the response returning the head and body parts.",48,null],[11,"map","","Consumes the response returning a new response with body mapped to the return type of the passed in function.",48,{"inputs":[{"name":"self"},{"name":"f"}],"output":{"name":"response"}}],[11,"new","","Create an empty `HeaderMap`.",46,{"inputs":[],"output":{"generics":["headervalue"],"name":"headermap"}}],[11,"with_capacity","","Create an empty `HeaderMap` with the specified capacity.",46,{"inputs":[{"name":"usize"}],"output":{"name":"headermap"}}],[11,"len","","Returns the number of headers stored in the map.",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"keys_len","","Returns the number of keys stored in the map.",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"is_empty","","Returns true if the map contains no elements.",46,{"inputs":[{"name":"self"}],"output":{"name":"bool"}}],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory for reuse.",46,null],[11,"capacity","","Returns the number of headers the map can hold without reallocating.",46,{"inputs":[{"name":"self"}],"output":{"name":"usize"}}],[11,"reserve","","Reserves capacity for at least `additional` more headers to be inserted into the `HeaderMap`.",46,null],[11,"get","","Returns a reference to the value associated with the key.",46,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"get_mut","","Returns a mutable reference to the value associated with the key.",46,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"get_all","","Returns a view of all values associated with a key.",46,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"getall"}}],[11,"contains_key","","Returns true if the map contains a value for the specified key.",46,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"bool"}}],[11,"iter","","An iterator visiting all key-value pairs.",46,{"inputs":[{"name":"self"}],"output":{"name":"iter"}}],[11,"iter_mut","","An iterator visiting all key-value pairs, with mutable value references.",46,{"inputs":[{"name":"self"}],"output":{"name":"itermut"}}],[11,"keys","","An iterator visiting all keys.",46,{"inputs":[{"name":"self"}],"output":{"name":"keys"}}],[11,"values","","An iterator visiting all values.",46,{"inputs":[{"name":"self"}],"output":{"name":"values"}}],[11,"values_mut","","An iterator visiting all values mutably.",46,{"inputs":[{"name":"self"}],"output":{"name":"valuesmut"}}],[11,"drain","","Clears the map, returning all entries as an iterator.",46,{"inputs":[{"name":"self"}],"output":{"name":"drain"}}],[11,"entry","","Gets the given key's corresponding entry in the map for in-place manipulation.",46,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"generics":["entry","invalidheadername"],"name":"result"}}],[11,"insert","","Inserts a key-value pair into the map.",46,{"inputs":[{"name":"self"},{"name":"k"},{"name":"t"}],"output":{"name":"option"}}],[11,"append","","Inserts a key-value pair into the map.",46,{"inputs":[{"name":"self"},{"name":"k"},{"name":"t"}],"output":{"name":"bool"}}],[11,"remove","","Removes a key from the map, returning the value associated with the key.",46,{"inputs":[{"name":"self"},{"name":"k"}],"output":{"name":"option"}}],[11,"reason","tower_grpc::codegen::server::h2","If the error was caused by the remote peer, the error reason.",42,{"inputs":[{"name":"self"}],"output":{"generics":["reason"],"name":"option"}}],[11,"from_parts","tower_grpc::codegen::client::http","Attempt to convert a `Uri` from `Parts`",45,{"inputs":[{"name":"parts"}],"output":{"generics":["uri","invaliduriparts"],"name":"result"}}],[11,"from_shared","","Attempt to convert a `Uri` from `Bytes`",45,{"inputs":[{"name":"bytes"}],"output":{"generics":["uri","invaliduribytes"],"name":"result"}}],[11,"path_and_query","","Returns the path & query components of the Uri",45,{"inputs":[{"name":"self"}],"output":{"generics":["pathandquery"],"name":"option"}}],[11,"path","","Get the path of this `Uri`.",45,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"scheme_part","","Get the scheme of this `Uri`.",45,{"inputs":[{"name":"self"}],"output":{"generics":["scheme"],"name":"option"}}],[11,"authority_part","","Get the authority of this `Uri`.",45,{"inputs":[{"name":"self"}],"output":{"generics":["authority"],"name":"option"}}],[11,"host","","Get the host of this `Uri`.",45,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"port","","Get the port of this `Uri`.",45,{"inputs":[{"name":"self"}],"output":{"generics":["u16"],"name":"option"}}],[11,"query","","Get the query string of this `Uri`, starting after the `?`.",45,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"from_shared","","Attempt to convert a `PathAndQuery` from `Bytes`.",44,{"inputs":[{"name":"bytes"}],"output":{"generics":["pathandquery","invaliduribytes"],"name":"result"}}],[11,"from_static","","Convert a `PathAndQuery` from a static string.",44,{"inputs":[{"name":"str"}],"output":{"name":"pathandquery"}}],[11,"path","","Returns the path component",44,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"query","","Returns the query string component",44,{"inputs":[{"name":"self"}],"output":{"generics":["str"],"name":"option"}}],[11,"as_str","","Returns the path and query as a string component.",44,{"inputs":[{"name":"self"}],"output":{"name":"str"}}],[11,"into_bytes","","Converts this `PathAndQuery` back to a sequence of bytes",44,{"inputs":[{"name":"self"}],"output":{"name":"bytes"}}]],"paths":[[4,"Error"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"ResponseFuture"],[8,"Encodable"],[3,"Grpc"],[3,"Grpc"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"Once"],[3,"ResponseFuture"],[8,"StreamingService"],[8,"UnaryService"],[8,"ClientStreamingService"],[8,"ServerStreamingService"],[3,"Encode"],[3,"Streaming"],[3,"EncodeBuf"],[3,"DecodeBuf"],[8,"Codec"],[8,"Encoder"],[8,"Decoder"],[3,"Request"],[3,"Response"],[3,"Status"],[3,"Code"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"ResponseFuture"],[3,"Grpc"],[8,"Future"],[8,"Stream"],[4,"Async"],[8,"Body"],[8,"Service"],[8,"ReadyService"],[8,"NewService"],[8,"HttpService"],[3,"Encode"],[3,"Error"],[3,"Bytes"],[3,"PathAndQuery"],[3,"Uri"],[3,"HeaderMap"],[3,"Request"],[3,"Response"],[3,"RecvBody"],[3,"FutureResult"]]};
initSearch(searchIndex);
